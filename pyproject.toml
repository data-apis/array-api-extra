[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "array-api-extra"
authors = [
    { name = "Lucas Colley", email = "lucas.colley8@gmail.com" },
    # { name = "Open Source Contributors" },  # https://github.com/pypi/warehouse/issues/14813
]
description = "Extra array functions built on top of the array API standard."
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.10"
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dynamic = ["version"]
dependencies = ["array-api-compat>=1.10.0,<2"]

[project.urls]
Homepage = "https://github.com/data-apis/array-api-extra"
"Bug Tracker" = "https://github.com/data-apis/array-api-extra/issues"
Changelog = "https://github.com/data-apis/array-api-extra/releases"


# Hatch

[tool.hatch]
version.path = "src/array_api_extra/__init__.py"


# Pixi

[tool.pixi.project]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
python = ">=3.10,<3.14"
array-api-compat = ">=1.10.0,<2"

[tool.pixi.pypi-dependencies]
array-api-extra = { path = ".", editable = true }

[tool.pixi.feature.lint.dependencies]
typing-extensions = "*"
pre-commit = "*"
pylint = "*"
basedmypy = "*"
basedpyright = "*"
numpydoc = ">=1.8.0,<2"
# import dependencies for mypy:
array-api-strict = "*"
numpy = "*"
pytest = "*"
dask-core = "*"  # No distributed, tornado, etc.
# NOTE: don't add jax, pytorch, sparse, cupy here
# as they slow down mypy and are not portable across target OSs

[tool.pixi.feature.lint.tasks]
pre-commit-install = "pre-commit install"
pre-commit = "pre-commit run --all-files"
mypy = "mypy"
pylint = { cmd = "pylint array_api_extra", cwd = "src" }
pyright = "basedpyright"
lint = { depends-on = ["pre-commit", "pylint", "mypy", "pyright"] }

[tool.pixi.feature.tests.dependencies]
pytest = ">=6"
pytest-cov = ">=3"
array-api-strict = "*"
numpy = "*"

[tool.pixi.feature.tests.tasks]
tests = "pytest -v"
tests-cov = "pytest -v -ra --cov --cov-report=xml --cov-report=term --durations=20"

clean-vendor-compat = "rm -rf vendor_tests/array_api_compat"
clean-vendor-extra = "rm -rf vendor_tests/array_api_extra"
copy-vendor-compat = { cmd = "cp -r $(python -c 'import site; print(site.getsitepackages()[0])')/array_api_compat vendor_tests/", depends-on = ["clean-vendor-compat"] }
copy-vendor-extra = { cmd = "cp -r src/array_api_extra vendor_tests/", depends-on = ["clean-vendor-extra"] }
tests-vendor = { cmd = "pytest -v vendor_tests", depends-on = ["copy-vendor-compat", "copy-vendor-extra"] }

tests-ci = { depends-on = ["tests-cov", "tests-vendor"] }
coverage = { cmd = "coverage html", depends-on = ["tests-cov"] }
open-coverage = { cmd = "open htmlcov/index.html", depends-on = ["coverage"] }

[tool.pixi.feature.docs.dependencies]
sphinx = ">=7.0"
furo = ">=2023.08.17"
myst-parser = ">=0.13"
sphinx-copybutton = "*"
sphinx-autodoc-typehints = "*"
# Needed to import parsed modules with autodoc
dask-core = "*"
pytest = "*"
typing-extensions = "*"

[tool.pixi.feature.docs.tasks]
docs = { cmd = "sphinx-build . build/", cwd = "docs" }
open-docs = { cmd = "open build/index.html", cwd = "docs", depends-on = ["docs"] }

[tool.pixi.feature.dev.dependencies]
ipython = "*"

[tool.pixi.feature.dev.tasks]
ipython = { cmd = "ipython" }

[tool.pixi.feature.py310.dependencies]
python = "~=3.10.0"

[tool.pixi.feature.py313.dependencies]
python = "~=3.13.0"

# Backends that can run on CPU-only hosts
[tool.pixi.feature.backends.target.linux-64.dependencies]
pytorch = "*"
dask = "*"
sparse = ">=0.15"
jax = "*"

[tool.pixi.feature.backends.target.osx-arm64.dependencies]
pytorch = "*"
dask = "*"
sparse = ">=0.15"
jax = "*"

[tool.pixi.feature.backends.target.win-64.dependencies]
pytorch = "*"
dask = "*"
sparse = ">=0.15"
# jax = "*"  # unavailable

# Backends that require a GPU host and a CUDA driver
[tool.pixi.feature.cuda-backends]
system-requirements = { cuda = "12" }

[tool.pixi.feature.cuda-backends.target.linux-64.dependencies]
cupy = "*"
jaxlib = { version = "*", build = "cuda12*" }

[tool.pixi.feature.cuda-backends.target.osx-arm64.dependencies]
# cupy = "*"  # unavailable
# jaxlib = { version = "*", build = "cuda12*" }  # unavailable

[tool.pixi.feature.cuda-backends.target.win-64.dependencies]
cupy = "*"
# jaxlib = { version = "*", build = "cuda12*" }  # unavailable

[tool.pixi.environments]
default = { solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }
tests = { features = ["tests"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
dev = { features = ["lint", "tests", "docs", "dev", "backends"], solve-group = "default" }
dev-cuda = { features = ["lint", "tests", "docs", "dev", "backends", "cuda-backends"] }
tests-py310 = ["py310", "tests"]
tests-py313 = ["py313", "tests"]
# CUDA not available on free github actions and on some developers' PCs
tests-backends = ["py310", "tests", "backends"]
tests-cuda = ["py310", "tests", "backends", "cuda-backends"]


# pytest

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]
markers = [
    "skip_xp_backend(library, *, reason=None): Skip test for a specific backend",
    "xfail_xp_backend(library, *, reason=None): Xfail test for a specific backend",
]


# Coverage

[tool.coverage]
run.source = ["array_api_extra"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
]

# mypy

[tool.mypy]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "truthy-bool"]
# https://github.com/data-apis/array-api-typing
disallow_any_expr = false
# false positives with input validation
disable_error_code = ["redundant-expr", "unreachable"]

[[tool.mypy.overrides]]
# slow/unavailable on Windows; do not add to the lint env
module = ["dask.*", "jax.*"]
ignore_missing_imports = true

# pyright

[tool.basedpyright]
include = ["src", "tests"]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "all"

# https://github.com/data-apis/array-api-typing
reportAny = false
reportExplicitAny = false
# no array-api-strict type stubs; pytest fixtures
reportUnknownMemberType = false
# no array-api-compat type stubs; pytest fixtures
reportUnknownVariableType = false
# Redundant with mypy checks
reportMissingImports = false
reportMissingTypeStubs = false
# false positives for input validation
reportUnreachable = false
# ruff handles this
reportUnusedParameter = false

executionEnvironments = [
    { root = "tests", reportPrivateUsage = false },
    { root = "src" },
]


# Ruff

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "F",   # Pyflakes
    "I",   # isort
    "E",   # Pycodestyle
    "W",   # Pycodestyle
    "N",   # pep8-naming
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD",  # pandas-vet
    "UP",  # Pyupgrade
]
ignore = [
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Conflicts with formatter
    "N801",    # Class name should use CapWords convention
    "N802",    # Function name should be lowercase
    "N806",    # Variable in function should be lowercase
]


# Pylint

[tool.pylint]
py-version = "3.10"
reports.output-format = "colorized"
messages_control.disable = [
    "design",                     # ignore heavily opinionated design checks
    "fixme",                      # allow FIXME comments
    "line-too-long",              # ruff handles this
    "unused-argument",            # ruff handles this
    "missing-function-docstring", # numpydoc handles this
    "import-error",               # mypy handles this
    "import-outside-toplevel",    # optional dependencies
]


# numpydoc

[tool.numpydoc_validation]
checks = [
    "all",  # report on all checks, except the below
    "EX01", # most docstrings do not need an example
    "SA01", # data-apis/array-api-extra#87
    "ES01", # most docstrings do not need an extended summary
]
exclude = [ # don't report on objects that match any of these regex
    '.*test_at.*',
    '.*test_funcs.*',
    '.*test_testing.*',
    '.*test_utils.*',
    '.*test_version.*',
    '.*test_vendor.*',
]
